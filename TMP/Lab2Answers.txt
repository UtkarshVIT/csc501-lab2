1.1. 
One of the solutions to priority inversion is Interrupt Disabling. If we disable interrupts if a process is in running state, then it cannot be pre-empted by another process irrespective of priority. This ensures that a lower priority process doesn't run before a higher priority process.

1.2. 
Note: Please refer to the output given below for the explanation of Case 1 and Case 2.

* Case 1 Using r/w locks *
When we use the implemented read/write locks, priority inversion is tackled. In the test case we first start a writer process W1 which acquires the lock and then sleeps. Then another process R1 is initiated. R1 prints its name a 100 times and then sleeps. Now, W2 process runs and as it cannot acquire the lock and hence goes to sleep. As W1 and W2 are accessing the same lock, the priority of W1 is increased to that of W2 and hence W1 is selected to run. After this, W2 is inserted in ready queue and it runs and after it R1 runs. As we can observe after W2 is started, R1 was not able to run before W2. Hence we were able to tackle priority inversion.

* Case 2 Using Xinu Semaphores *
Similarly to the above situation after R1 wakes up, it is selected to run before W2 despite having lower priority as R1 is the highest priority process in Ready queue. Thus priority inversion exists in Xinu Semaphores.

* Interrupt Disabling method *
In case interrupts were disabled then R1 will not be able to pre-empt W1 and W1 will finish executing and put W2 in the ready queue. The scheduler will then pick W2 before R1 due to higher priority thus avoiding priority inversion.

-----------------using custom locks-------------------
  W1: to acquire lock
  W1: acquired lock, sleep 1s
starting R1
R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1
 R1 sleeping for 3sec.
  W2: to acquire lock
  W1: to release lock

  W2: acquired lock, sleep 1s
  W2: to release lock
R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1

-----------------using Xinu sem-------------------
  S1: to acquire sem
  S1: acquired sem, sleep 1s
starting R1
R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1
 R1 sleeping for 3sec.
R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1R1
  S1: to release sem
  S2: to acquire sem
  S2: acquired sem, sleep 1s
  S2: to release sem


2.
In the given pseudocode let us see the following scenario. Suppose a reader R1 first acquires the resource mutex and enters the critical section. Then writer W1 tries to acquire the resource mutex and enters waiting state. Now another reader R2 enters the critical section as it does not have to acquire the resource mutex. If subsequently many readers enter the critical section, it will lead to starvation of W1. Thus, such a scenario in the pseudocode will result in writer starvation.